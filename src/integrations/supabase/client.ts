
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://rzuupvxigzdvnwlrcevo.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ6dXVwdnhpZ3pkdm53bHJjZXZvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcwNDM4MjYsImV4cCI6MjA2MjYxOTgyNn0.jDF-5Y8QZAZbcuRq80MkXZWaxw3vG2sxSZyubi3xWIo";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function to get the current session
export const getCurrentSession = async () => {
  const { data, error } = await supabase.auth.getSession();
  if (error) {
    console.error("Error getting session:", error);
    return null;
  }
  return data.session;
};

// Helper function to check if a user is an admin
export const isUserAdmin = async (userId) => {
  if (!userId) return false;
  
  const { data, error } = await supabase
    .from('admin_users')
    .select('user_id')
    .eq('user_id', userId)
    .single();
    
  if (error) {
    console.error("Error checking admin status:", error);
    return false;
  }
  
  return !!data;
};

// Helper function to get HubSpot OAuth token
export const getHubspotOAuthToken = async () => {
  // First check if user is admin
  const session = await getCurrentSession();
  if (!session) return null;
  
  const isAdmin = await isUserAdmin(session.user.id);
  if (!isAdmin) return null;
  
  const { data, error } = await supabase
    .from('oauth_tokens')
    .select('*')
    .eq('id', 1)
    .single();
    
  if (error) {
    console.error("Error fetching OAuth token:", error);
    return null;
  }
  
  // Check if token is expired
  if (new Date(data.expires_at) <= new Date()) {
    console.warn("OAuth token is expired, should be refreshed");
    // The actual token refresh will be handled by the Node.js backend
  }
  
  return data;
};

// Helper function to check if a user has a HubSpot token linked
export const hasUserHubspotToken = async (userId) => {
  if (!userId) return false;
  
  const { data, error } = await supabase
    .from('user_hubspot_tokens')
    .select('id')
    .eq('user_id', userId)
    .single();
    
  if (error) {
    if (error.code !== 'PGRST116') { // No rows returned
      console.error("Error checking user HubSpot token:", error);
    }
    return false;
  }
  
  return !!data;
};

// Helper function to get a user's HubSpot OAuth token
export const getUserHubspotToken = async (userId) => {
  if (!userId) return null;
  
  const { data, error } = await supabase
    .from('user_hubspot_tokens')
    .select('*')
    .eq('user_id', userId)
    .single();
    
  if (error) {
    console.error("Error fetching user HubSpot token:", error);
    return null;
  }
  
  // Check if token is expired
  if (new Date(data.expires_at) <= new Date()) {
    console.warn("User HubSpot token is expired, should be refreshed");
    
    // Call the Edge Function to refresh the token
    const session = await getCurrentSession();
    if (session) {
      try {
        const response = await fetch('https://rzuupvxigzdvnwlrcevo.supabase.co/functions/v1/refresh-user-token', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${session.access_token}`
          },
          body: JSON.stringify({ userId })
        });
        
        if (!response.ok) {
          throw new Error(`Failed to refresh token: ${response.status}`);
        }
        
        // Fetch the updated token after refreshing
        const { data: refreshedData, error: refreshError } = await supabase
          .from('user_hubspot_tokens')
          .select('*')
          .eq('user_id', userId)
          .single();
          
        if (refreshError) {
          console.error("Error fetching refreshed HubSpot token:", refreshError);
          return null;
        }
        
        return refreshedData;
      } catch (refreshError) {
        console.error("Error refreshing user token:", refreshError);
      }
    }
  }
  
  return data;
};

// Helper function to store a user's HubSpot OAuth token
export const storeUserHubspotToken = async (userId, hubspotUserId, accessToken, refreshToken, expiresAt) => {
  if (!userId) return null;
  
  const { data, error } = await supabase
    .from('user_hubspot_tokens')
    .upsert({
      user_id: userId,
      hubspot_user_id: hubspotUserId,
      access_token: accessToken,
      refresh_token: refreshToken,
      expires_at: expiresAt
    })
    .select();
    
  if (error) {
    console.error("Error storing user HubSpot token:", error);
    return null;
  }
  
  return data[0];
};
